{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","InfoBar","infoMessage","infoType","setInfoMessage","className","Filter","nameFilter","updateFilter","value","onChange","EntryForm","onSubmit","name","nameHandler","number","numberHandler","type","DisplayFiltered","result","listToBeFiltered","filter","setPersons","persons","setInfoType","length","person","a","b","i","arraysEqual","toLowerCase","slice","map","key","onClick","window","confirm","personService","catch","error","msg","removeContact","App","useState","newName","setNewName","newNumber","setNewNumber","setNameFilter","useEffect","event","target","preventDefault","dialogue","includes","contact","find","p","updatedContact","setTimeout","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f6624659.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n// const baseUrl = 'http://fierce-dusk-80568.herokuapp.com/api/persons'\n\nconst getAll = () => {\n\tconst request = axios.get(baseUrl)\n\treturn request.then(response => response.data)\n}\n\nconst create = newObject => {\n\tconst request = axios.post(baseUrl, newObject)\n\treturn request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n\tconst request = axios.put(`${baseUrl}/${id}`, newObject)\n\treturn request.then(response => response.data)\n}\n\nconst remove = id => {\n\tconst request = axios.delete(`${baseUrl}/${id}`)\n\treturn request.then(response => response.data)\n}\n\nexport default {getAll, create, update, remove}\n","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons.js'\nimport './index.css'\n\n\nconst InfoBar = ({infoMessage, setInfoMessage, infoType}) => {\n    if (infoMessage === null) return null\n    return (\n        <div className={infoType}>{infoMessage}</div>\n    )\n}\n\nconst Filter = ({nameFilter, updateFilter}) => (\n    <div>\n      Filter names:<input value={nameFilter} onChange={updateFilter}/>\n    </div>)\n\nconst EntryForm = ({onSubmit, name, nameHandler, number, numberHandler}) => (\n    <form onSubmit={onSubmit}>\n      <div>\n        <div>name:<input value={name} onChange={nameHandler}/></div>\n        <div>number: <input value={number} onChange={numberHandler}/></div>\n      </div>\n      <div>\n        <button type=\"submit\">\n          Add\n        </button>\n      </div>      \n\t</form>)\n\nconst DisplayFiltered = ({listToBeFiltered, filter, persons, setPersons,\n                          infoMessage, setInfoMessage, infoType, setInfoType }) => {\n    const arraysEqual = (a, b) => {\n        if (a === b) return true\n        if (a == null || b == null) return false\n        if (a.length !== b.length) return false\n        for (let i = 0; i < a.length; i++) {\n            if (a[i] !== b[i]) return false\n\t\t}\n        return true\n    }\n\n    const removeContact = person => {\n        if (window.confirm(`Do you really want to delete ${person.name} from your contacts?`)) {\n            personService.remove(person.id)\n                .then(response => {\n                    setInfoType('info')\n                    setInfoMessage(`Succesfully removed ${person.name}`)\n                    personService.getAll().then(response => setPersons(response))\n                })\n                .catch(error => {\n                    const msg = `Entry for ${person.name} wasn't found in database.`\n                    setInfoType('error')\n                    setInfoMessage(msg)\n                    personService.getAll().then(response => setPersons(response))\n\t\t\t\t})\n        }\n    }\n    \n    \n    let result\n    if (filter.length === 0) {\n        result = listToBeFiltered\n    }\n    else {\n        result = listToBeFiltered.filter(person =>\n                                         arraysEqual([...person.name.toLowerCase()].slice(0, filter.length),\n                                                     [...filter.toLowerCase()]))\n    }\n    return (\n        <div>\n          {result.map(person =>\n                      <div key={person.name}>\n                        {person.name} {person.number} <button onClick={() => removeContact(person)}>Delete</button>\n                      </div>)}\n\t    </div>)\n\n\n}\n\n\nconst App = () => {\n    const [persons, setPersons] = useState([]) \n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n    const [nameFilter, setNameFilter] = useState('')\n    const [infoMessage, setInfoMessage] = useState(null)\n    const [infoType, setInfoType ] = useState('info')\n\n    const hook = () => {\n        personService.getAll()\n          .then(response => {\n              setPersons(response)\n\t\t  })\n    }\n\n    useEffect(hook, [])\n    \n    const addName = (event) => {\n        event.preventDefault()\n        const dialogue = `${newName} already exists in the phonebook! Do you want to replace the phone number for the contact?`\n        if (persons.map(person => person.name).includes(newName)) {\n            if (window.confirm(dialogue)) {\n                const contact = persons.find(p => p.name === newName)\n                const updatedContact = {...contact, number: newNumber}\n                personService.update(contact.id, updatedContact)\n                    .then(response =>\n                          personService.getAll()\n                          .then(response => {\n                              setPersons(response)\n                              setInfoType('info')\n                              setInfoMessage(`${contact.name} succesfully updated!`)\n                              setTimeout(() => {\n                                  setInfoMessage(null)\n                              }, 5000)\n                          }))\n\t\t\t}\n\t\t} else {\n            const phonebookEntry = {\n                name: newName,\n                number: newNumber\n\t\t    }\n            personService.create(phonebookEntry)\n                .then(response =>\n                      personService.getAll()\n                      .then(response => {\n                          setPersons(response)\n                          setInfoType('info')\n                          setInfoMessage(`${newName} succesfully added to phonebook!`)\n                          setTimeout(() => {\n                              setInfoMessage(null)\n                          }, 5000)\n                      }))\n\t\t\t\t.catch(error => {\n\t\t\t\t\tconsole.log('error logged')\n\t\t\t\t\tconsole.log(error)\n\t\t\t\t\tconsole.log(error.response)\n\t\t\t\t\tconsole.log(error.response.data)\n\t\t\t\t\tconsole.log(error.response.data.error)\n\t\t\t\t\tsetInfoType('error')\n                    setInfoMessage(error.response.data.error)\n\t\t\t\t})\n\t    }\n    }\n\n    const handleNameChange = (event) => {\n        setNewName(event.target.value)\n\t}\n    \n    const handleNumberChange = (event) => {\n        setNewNumber(event.target.value)\n    }\n\n    const updateFilter= (event) => {\n        const filter = event.target.value\n        setNameFilter(filter)\n\t}\n    \n    return (\n        <div>\n          <InfoBar infoMessage={infoMessage} setInfoMessage={setInfoMessage} infoType={infoType}/>\n          <h2>Phonebook</h2>\n          <Filter nameFilter={nameFilter} updateFilter={updateFilter}/>\n          <h2>Add entry to phonebook</h2>\n          <EntryForm onSubmit={addName} name={newName} nameHandler={handleNameChange}\n                     number={newNumber} numberHandler={handleNumberChange}/>\n          <h2>Numbers</h2>\n          <DisplayFiltered listToBeFiltered={persons} filter={nameFilter}\n                           persons={persons} setPersons={setPersons} infoMessage={infoMessage}\n                           setInfoMessage={setInfoMessage} infoType={infoType} setInfoType={setInfoType}/>\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}